import { _ as _export_sfc, c as createElementBlock, o as openBlock, ai as createStaticVNode } from "./chunks/framework.C0CpARbg.js";
const __pageData = JSON.parse('{"title":"Text Utilities","description":"","frontmatter":{},"headers":[],"relativePath":"extra_tools/text_utilities_intro.md","filePath":"extra_tools/text_utilities_intro.md","lastUpdated":null}');
const _sfc_main = { name: "extra_tools/text_utilities_intro.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createStaticVNode('<h1 id="Text-Utilities" tabindex="-1">Text Utilities <a class="header-anchor" href="#Text-Utilities" aria-label="Permalink to &quot;Text Utilities {#Text-Utilities}&quot;">​</a></h1><p>Working with Generative AI (and in particular with the text modality), requires a lot of text manipulation. PromptingTools.jl provides a set of utilities to make this process easier and more efficient.</p><h2 id="Highlights" tabindex="-1">Highlights <a class="header-anchor" href="#Highlights" aria-label="Permalink to &quot;Highlights {#Highlights}&quot;">​</a></h2><p>The main functions to be aware of are</p><ul><li><p><code>recursive_splitter</code> to split the text into sentences and words (of a desired length <code>max_length</code>)</p></li><li><p><code>replace_words</code> to mask some sensitive words in your text before sending it to AI</p></li><li><p><code>wrap_string</code> for wrapping the text into a desired length by adding newlines (eg, to fit some large text into your terminal width)</p></li><li><p><code>length_longest_common_subsequence</code> to find the length of the longest common subsequence between two strings (eg, to compare the similarity between the context provided and generated text)</p></li><li><p><code>distance_longest_common_subsequence</code> a companion utility for <code>length_longest_common_subsequence</code> to find the normalized distance between two strings. Always returns a number between 0-1, where 0 means the strings are identical and 1 means they are completely different.</p></li></ul><p>You can import them simply via:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptingTools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> recursive_splitter, replace_words, wrap_string, length_longest_common_subsequence, distance_longest_common_subsequence</span></span></code></pre></div><p>There are many more (especially in the AgentTools module).</p><p>Text utilities that used to live in <code>Experimental.RAGTools</code> have moved to the <a href="https://github.com/JuliaGenAI/RAGTools.jl" target="_blank" rel="noreferrer">RAGTools.jl</a> package.</p><ul><li><code>STOPWORDS</code> a set of common stopwords (very brief)</li></ul><p>Feel free to open an issue or ask in the <code>#generative-ai</code> channel in the JuliaLang Slack if you have a specific need.</p><h2 id="References" tabindex="-1">References <a class="header-anchor" href="#References" aria-label="Permalink to &quot;References {#References}&quot;">​</a></h2><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.recursive_splitter-extra_tools-text_utilities_intro" href="#PromptingTools.recursive_splitter-extra_tools-text_utilities_intro">#</a> <b><u>PromptingTools.recursive_splitter</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; separator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{String}</span></span></code></pre></div><p>Split a given string <code>text</code> into chunks of a specified maximum length <code>max_length</code>. This is particularly useful for splitting larger documents or texts into smaller segments, suitable for models or systems with smaller context windows.</p><p>There is a method for dispatching on multiple separators, <code>recursive_splitter(text::String, separators::Vector{String}; max_length::Int=35000) -&gt; Vector{String}</code> that mimics the logic of Langchain&#39;s <code>RecursiveCharacterTextSplitter</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>text::String</code>: The text to be split.</p></li><li><p><code>separator::String=&quot; &quot;</code>: The separator used to split the text into minichunks. Defaults to a space character.</p></li><li><p><code>max_length::Int=35000</code>: The maximum length of each chunk. Defaults to 35,000 characters, which should fit within 16K context window.</p></li></ul><p><strong>Returns</strong></p><p><code>Vector{String}</code>: A vector of strings, each representing a chunk of the original text that is smaller than or equal to <code>max_length</code>.</p><p><strong>Notes</strong></p><ul><li><p>The function ensures that each chunk is as close to <code>max_length</code> as possible without exceeding it.</p></li><li><p>If the <code>text</code> is empty, the function returns an empty array.</p></li><li><p>The <code>separator</code> is re-added to the text chunks after splitting, preserving the original structure of the text as closely as possible.</p></li></ul><p><strong>Examples</strong></p><p>Splitting text with the default separator (&quot; &quot;):</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello world. How are you?&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text; max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunks) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: 2</span></span></code></pre></div><p>Using a custom separator and custom <code>max_length</code></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello,World,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2900</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # length 34900 chars</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text; separator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># for 4K context window</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunks[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: 4</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/f9304d80dc24eaf0a193f13b5182a4b9324bec8a/src/utils.jl#L37-L74" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, separators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{String}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{String}</span></span></code></pre></div><p>Split a given string <code>text</code> into chunks recursively using a series of separators, with each chunk having a maximum length of <code>max_length</code> (if it&#39;s achievable given the <code>separators</code> provided). This function is useful for splitting large documents or texts into smaller segments that are more manageable for processing, particularly for models or systems with limited context windows.</p><p>It was previously known as <code>split_by_length</code>.</p><p>This is similar to Langchain&#39;s <a href="https://python.langchain.com/docs/modules/data_connection/document_transformers/recursive_text_splitter" target="_blank" rel="noreferrer"><code>RecursiveCharacterTextSplitter</code></a>. To achieve the same behavior, use <code>separators=[&quot;\\n\\n&quot;, &quot;\\n&quot;, &quot; &quot;, &quot;&quot;]</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>text::AbstractString</code>: The text to be split.</p></li><li><p><code>separators::Vector{String}</code>: An ordered list of separators used to split the text. The function iteratively applies these separators to split the text. Recommend to use <code>[&quot;\\n\\n&quot;, &quot;. &quot;, &quot;\\n&quot;, &quot; &quot;]</code></p></li><li><p><code>max_length::Int</code>: The maximum length of each chunk. Defaults to 35,000 characters. This length is considered after each iteration of splitting, ensuring chunks fit within specified constraints.</p></li></ul><p><strong>Returns</strong></p><p><code>Vector{String}</code>: A vector of strings, where each string is a chunk of the original text that is smaller than or equal to <code>max_length</code>.</p><p><strong>Usage Tips</strong></p><ul><li><p>I tend to prefer splitting on sentences (<code>&quot;. &quot;</code>) before splitting on newline characters (<code>&quot;\\n&quot;</code>) to preserve the structure of the text.</p></li><li><p>What&#39;s the difference between <code>separators=[&quot;\\n&quot;,&quot; &quot;,&quot;&quot;]</code> and <code>separators=[&quot;\\n&quot;,&quot; &quot;]</code>? The former will split down to character level (<code>&quot;&quot;</code>), so it will always achieve the <code>max_length</code> but it will split words (bad for context!) I prefer to instead set slightly smaller <code>max_length</code> but not split words.</p></li></ul><p><strong>How It Works</strong></p><ul><li><p>The function processes the text iteratively with each separator in the provided order. It then measures the length of each chunk and splits it further if it exceeds the <code>max_length</code>. If the chunks is &quot;short enough&quot;, the subsequent separators are not applied to it.</p></li><li><p>Each chunk is as close to <code>max_length</code> as possible (unless we cannot split it any further, eg, if the splitters are &quot;too big&quot; / there are not enough of them)</p></li><li><p>If the <code>text</code> is empty, the function returns an empty array.</p></li><li><p>Separators are re-added to the text chunks after splitting, preserving the original structure of the text as closely as possible. Apply <code>strip</code> if you do not need them.</p></li><li><p>The function provides <code>separators</code> as the second argument to distinguish itself from its single-separator counterpart dispatch.</p></li></ul><p><strong>Examples</strong></p><p>Splitting text using multiple separators:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Paragraph 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Paragraph 2. Sentence 1. Sentence 2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Paragraph 3&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">separators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># split by paragraphs, sentences, and newlines (not by words)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, separators, max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Splitting text using multiple separators - with splitting on words:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Paragraph 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Paragraph 2. Sentence 1. Sentence 2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Paragraph 3&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">separators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># split by paragraphs, sentences, and newlines, words</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, separators, max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Using a single separator:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello,World,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2900</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # length 34900 characters</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>To achieve the same behavior as Langchain&#39;s <code>RecursiveCharacterTextSplitter</code>, use <code>separators=[&quot;\\n\\n&quot;, &quot;\\n&quot;, &quot; &quot;, &quot;&quot;]</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Paragraph 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Paragraph 2. Sentence 1. Sentence 2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Paragraph 3&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">separators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> recursive_splitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, separators, max_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/f9304d80dc24eaf0a193f13b5182a4b9324bec8a/src/utils.jl#L122-L185" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.replace_words-extra_tools-text_utilities_intro" href="#PromptingTools.replace_words-extra_tools-text_utilities_intro">#</a> <b><u>PromptingTools.replace_words</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">replace_words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, words</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replacement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ABC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replace all occurrences of words in <code>words</code> with <code>replacement</code> in <code>text</code>. Useful to quickly remove specific names or entities from a text.</p><p><strong>Arguments</strong></p><ul><li><p><code>text::AbstractString</code>: The text to be processed.</p></li><li><p><code>words::Vector{&lt;:AbstractString}</code>: A vector of words to be replaced.</p></li><li><p><code>replacement::AbstractString=&quot;ABC&quot;</code>: The replacement string to be used. Defaults to &quot;ABC&quot;.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Disney is a great company&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">replace_words</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Disney&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Snow White&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mickey Mouse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: &quot;ABC is a great company&quot;</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/f9304d80dc24eaf0a193f13b5182a4b9324bec8a/src/utils.jl#L3-L19" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.wrap_string-extra_tools-text_utilities_intro" href="#PromptingTools.wrap_string-extra_tools-text_utilities_intro">#</a> <b><u>PromptingTools.wrap_string</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wrap_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text_width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{AbstractString, AbstractChar}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span></span></code></pre></div><p>&#39;)</p><p>Breaks a string into lines of a given <code>text_width</code>. Optionally, you can specify the <code>newline</code> character or string to use.</p><p><strong>Example:</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wrap_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Certainly, here&#39;s a function in Julia that will wrap a string according to the specifications:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> print</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/f9304d80dc24eaf0a193f13b5182a4b9324bec8a/src/utils.jl#L207-L221" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="PromptingTools.length_longest_common_subsequence-extra_tools-text_utilities_intro" href="#PromptingTools.length_longest_common_subsequence-extra_tools-text_utilities_intro">#</a> <b><u>PromptingTools.length_longest_common_subsequence</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length_longest_common_subsequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itr1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, itr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the length of the longest common subsequence between two string sequences (ie, the higher the number, the better the match).</p><p>Source: <a href="https://cn.julialang.org/LeetCode.jl/dev/democards/problems/problems/1143.longest-common-subsequence/" target="_blank" rel="noreferrer">https://cn.julialang.org/LeetCode.jl/dev/democards/problems/problems/1143.longest-common-subsequence/</a></p><p><strong>Arguments</strong></p><ul><li><p><code>itr1</code>: The first sequence, eg, a String.</p></li><li><p><code>itr2</code>: The second sequence, eg, a String.</p></li></ul><p><strong>Returns</strong></p><p>The length of the longest common subsequence.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc-abc----&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;___ab_c__abc&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">longest_common_subsequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text1, text2)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: 6 (-&gt; &quot;abcabc&quot;)</span></span></code></pre></div><p>It can be used to fuzzy match strings and find the similarity between them (Tip: normalize the match)</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commands </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;product recommendation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;emotions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;specific product advice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;checkout advice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Which product can you recommend for me?&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> argmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length_longest_common_subsequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query), commands))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length_longest_common_subsequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query, commands[pos])</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    norm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commands[pos]))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The closest command to the query: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commands[pos])</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; (distance: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(dist)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, normalized: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(norm)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>But it might be easier to use directly the convenience wrapper <code>distance_longest_common_subsequence</code>!</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>[source](https://github.com/svilupp/PromptingTools.jl/blob/f9304d80dc24eaf0a193f13b5182a4b9324bec8a/src/utils.jl#L255-L291)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;/div&gt;</span></span>\n<span class="line"><span>&lt;br&gt;</span></span>\n<span class="line"><span>&lt;div style=&#39;border-width:1px; border-style:solid; border-color:black; padding: 1em; border-radius: 25px;&#39;&gt;</span></span>\n<span class="line"><span>&lt;a id=&#39;PromptingTools.distance_longest_common_subsequence-extra_tools-text_utilities_intro&#39; href=&#39;#PromptingTools.distance_longest_common_subsequence-extra_tools-text_utilities_intro&#39;&gt;#&lt;/a&gt;&amp;nbsp;&lt;b&gt;&lt;u&gt;PromptingTools.distance_longest_common_subsequence&lt;/u&gt;&lt;/b&gt; &amp;mdash; &lt;i&gt;Function&lt;/i&gt;.</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>```julia</span></span>\n<span class="line"><span>distance_longest_common_subsequence(</span></span>\n<span class="line"><span>    input1::AbstractString, input2::AbstractString)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>distance_longest_common_subsequence(</span></span>\n<span class="line"><span>    input1::AbstractString, input2::AbstractVector{&lt;:AbstractString})</span></span></code></pre></div><p>Measures distance between two strings using the length of the longest common subsequence (ie, the lower the number, the better the match). Perfect match is <code>distance = 0.0</code></p><p>Convenience wrapper around <code>length_longest_common_subsequence</code> to normalize the distances to 0-1 range. There is a also a dispatch for comparing a string vs an array of strings.</p><p><strong>Notes</strong></p><ul><li><p>Use <code>argmin</code> and <code>minimum</code> to find the position of the closest match and the distance, respectively.</p></li><li><p>Matching with an empty string will always return 1.0 (worst match), even if the other string is empty as well (safety mechanism to avoid division by zero).</p></li></ul><p><strong>Arguments</strong></p><ul><li><p><code>input1::AbstractString</code>: The first string to compare.</p></li><li><p><code>input2::AbstractString</code>: The second string to compare.</p></li></ul><p><strong>Example</strong></p><p>You can also use it to find the closest context for some AI generated summary/story:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The enigmatic stranger vanished as swiftly as a wisp of smoke, leaving behind a trail of unanswered questions.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Beneath the shimmering moonlight, the ocean whispered secrets only the stars could hear.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;The ancient tree stood as a silent guardian, its gnarled branches reaching for the heavens.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;The melody danced through the air, painting a vibrant tapestry of emotions.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Time flowed like a relentless river, carrying away memories and leaving imprints in its wake.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">story </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Beneath the shimmering moonlight, the ocean whispered secrets only the stars could hear.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Under the celestial tapestry, the vast ocean whispered its secrets to the indifferent stars. Each ripple, a murmured confidence, each wave, a whispered lament. The glittering celestial bodies listened in silent complicity, their enigmatic gaze reflecting the ocean&#39;s unspoken truths. The cosmic dance between the sea and the sky, a symphony of shared secrets, forever echoing in the ethereal expanse.</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> distance_longest_common_subsequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(story, context)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@info</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The closest context to the query: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(story,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">argmin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dist)])</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; (distance: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(minimum(dist))</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span></code></pre></div><p><a href="https://github.com/svilupp/PromptingTools.jl/blob/f9304d80dc24eaf0a193f13b5182a4b9324bec8a/src/utils.jl#L304-L346" target="_blank" rel="noreferrer">source</a></p></div><br>', 20)
  ]));
}
const text_utilities_intro = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  text_utilities_intro as default
};
