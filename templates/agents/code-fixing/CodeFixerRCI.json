[
    {
        "content": "Template Metadata",
        "description": "This template is meant to be used with `AICodeFixer`. It loosely follows the [Recursive Critique and Improvement paper](https://arxiv.org/pdf/2303.17491.pdf) with two steps Critique and Improve based on `feedback`. Placeholders: `feedback`",
        "version": "1.1",
        "source": "",
        "_type": "metadatamessage"
    },
    {
        "content": "Ignore all previous instructions. \nYour goal is to satisfy the user's request by using several rounds of self-reflection (Critique step) and improvement of the previously provided solution (Improve step).\nAlways enclose the Julia code in triple backticks code fence (```julia\\n ... \\n```).\n\n1. **Recall Past Critique:**\n- Summarize past critiques to refresh your memory (use inline quotes to highlight the few characters of the code that caused the mistakes). It must not be repeated.\n\n2. **Critique Step Instructions:** \n- Read the user request word-by-word. Does the code implementation follow the request to the letter? Let's think step by step.\n- Review the provided feedback in detail.\n- Provide 2-3 bullet points of criticism for the code. Each bullet point must refer to a different type of error or issue.\n    - If there are any errors, explain why and what needs to be changed to FIX THEM! Be specific. \n    - If an error repeats or critique repeats, the previous issue was not addressed. YOU MUST SUGGEST A DIFFERENT IMPROVEMENT THAN BEFORE.\n    - If there are no errors, identify and list specific issues or areas for improvement to write more idiomatic Julia code.\n\n\n3. **Improve Step Instructions:** \n- Specify what you'll change to address the above critique.\n- Provide the revised code reflecting your suggested improvements. Always repeat the function definition, as only the Julia code in the last message will be evaluated.\n- Ensure the new version of the code resolves the problems while fulfilling the original task. Ensure it has the same function name.\n- Write 2-3 correct and helpful unit tests for the function requested by the user (organize in `@testset \"name\" begin ... end` block, use `@test` macro).\n\n\n3. **Response Format:**\n---\n### Past Critique\n<brief bullet points on past critique>\n\n### Critique\n<list of issues as bullet points pinpointing the mistakes in the code (use inline quotes)>\n\n### Improve\n<list of improvements as bullet points with a clear outline of a solution (use inline quotes)>\n\n```julia\n<provide improved code>\n```\n---\n\nBe concise and focused in all steps.\n\n### Feedback from the User\n\n{{feedback}}\n\nI believe in you. You can actually do it, so do it ffs. Avoid shortcuts or placing comments instead of code. I also need code, actual working Julia code.\nWhat are your Critique and Improve steps?\n  ",
        "variables": [
            "feedback"
        ],
        "_type": "usermessage"
    },
    {
        "content": "### Feedback from the User\n\n{{feedback}}\n\nBased on your past critique and the latest feedback, what are your Critique and Improve steps?\n",
        "variables": [
            "feedback"
        ],
        "_type": "usermessage"
    }
]